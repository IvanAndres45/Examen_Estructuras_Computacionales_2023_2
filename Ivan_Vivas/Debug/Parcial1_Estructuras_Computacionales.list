
Parcial1_Estructuras_Computacionales.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe0  08004fe0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe8  08004fe8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08004ffc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004ffc  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d3b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022a6  00000000  00000000  00030dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00033060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bec  00000000  00000000  00033f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026030  00000000  00000000  00034b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011dea  00000000  00000000  0005abb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eea99  00000000  00000000  0006c99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004020  00000000  00000000  0015b438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015f458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f80 	.word	0x08004f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f80 	.word	0x08004f80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb7e 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f838 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f974 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f954 	bl	8000780 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f922 	bl	8000720 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004dc:	f000 f882 	bl	80005e4 <MX_TIM3_Init>
  MX_TIM16_Init();
 80004e0:	f000 f8f8 	bl	80006d4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Se inicia el contador del Timer 16 en modo Interrupción
  HAL_TIM_Base_Start_IT(&htim16);
 80004e4:	4812      	ldr	r0, [pc, #72]	; (8000530 <main+0x6c>)
 80004e6:	f002 fc41 	bl	8002d6c <HAL_TIM_Base_Start_IT>

  // Iniciamos el PWM en el Timmer 2 en el canal 1
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004ea:	2100      	movs	r1, #0
 80004ec:	4811      	ldr	r0, [pc, #68]	; (8000534 <main+0x70>)
 80004ee:	f002 fd0f 	bl	8002f10 <HAL_TIM_PWM_Start>

  // Definimos la variable maxDuty igual al registro ARR
  maxDuty = htim3.Instance->ARR;
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <main+0x70>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <main+0x74>)
 80004fc:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Aumentamos el Duty hasta llegar al máximo valor
	  for (duty = 0; duty < maxDuty; ++duty) {
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <main+0x78>)
 8000500:	2200      	movs	r2, #0
 8000502:	801a      	strh	r2, [r3, #0]
 8000504:	e00d      	b.n	8000522 <main+0x5e>
		  htim3.Instance->CCR1 = duty; // El ancho del  pulso del canal 0 (PA6) va a ir incrementando hasta llegar al ARR
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0x78>)
 8000508:	881a      	ldrh	r2, [r3, #0]
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x70>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f000 fbd5 	bl	8000cc0 <HAL_Delay>
	  for (duty = 0; duty < maxDuty; ++duty) {
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <main+0x78>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b29a      	uxth	r2, r3
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <main+0x78>)
 8000520:	801a      	strh	r2, [r3, #0]
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <main+0x78>)
 8000524:	881a      	ldrh	r2, [r3, #0]
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <main+0x74>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d3eb      	bcc.n	8000506 <main+0x42>
 800052e:	e7e6      	b.n	80004fe <main+0x3a>
 8000530:	20000074 	.word	0x20000074
 8000534:	20000028 	.word	0x20000028
 8000538:	20000192 	.word	0x20000192
 800053c:	20000190 	.word	0x20000190

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	; 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	; 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 fce9 	bl	8004f26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f001 f897 	bl	8001698 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 f954 	bl	800081c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f8ce 	bl	8001744 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 f935 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fc96 	bl	8001efc <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f921 	bl	800081c <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	; 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08e      	sub	sp, #56	; 0x38
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <MX_TIM3_Init+0xe8>)
 8000618:	4a2d      	ldr	r2, [pc, #180]	; (80006d0 <MX_TIM3_Init+0xec>)
 800061a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_TIM3_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_TIM3_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_TIM3_Init+0xe8>)
 800062a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800062e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_TIM3_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_TIM3_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800063c:	4823      	ldr	r0, [pc, #140]	; (80006cc <MX_TIM3_Init+0xe8>)
 800063e:	f002 fb3d 	bl	8002cbc <HAL_TIM_Base_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000648:	f000 f8e8 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000656:	4619      	mov	r1, r3
 8000658:	481c      	ldr	r0, [pc, #112]	; (80006cc <MX_TIM3_Init+0xe8>)
 800065a:	f002 fe73 	bl	8003344 <HAL_TIM_ConfigClockSource>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000664:	f000 f8da 	bl	800081c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000668:	4818      	ldr	r0, [pc, #96]	; (80006cc <MX_TIM3_Init+0xe8>)
 800066a:	f002 fbef 	bl	8002e4c <HAL_TIM_PWM_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000674:	f000 f8d2 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_TIM3_Init+0xe8>)
 8000688:	f003 fb56 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000692:	f000 f8c3 	bl	800081c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000696:	2360      	movs	r3, #96	; 0x60
 8000698:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	4619      	mov	r1, r3
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <MX_TIM3_Init+0xe8>)
 80006ae:	f002 fd35 	bl	800311c <HAL_TIM_PWM_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80006b8:	f000 f8b0 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <MX_TIM3_Init+0xe8>)
 80006be:	f000 f91d 	bl	80008fc <HAL_TIM_MspPostInit>

}
 80006c2:	bf00      	nop
 80006c4:	3738      	adds	r7, #56	; 0x38
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000028 	.word	0x20000028
 80006d0:	40000400 	.word	0x40000400

080006d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_TIM16_Init+0x44>)
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <MX_TIM16_Init+0x48>)
 80006dc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_TIM16_Init+0x44>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_TIM16_Init+0x44>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_TIM16_Init+0x44>)
 80006ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_TIM16_Init+0x44>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_TIM16_Init+0x44>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_TIM16_Init+0x44>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_TIM16_Init+0x44>)
 8000706:	f002 fad9 	bl	8002cbc <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000710:	f000 f884 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000074 	.word	0x20000074
 800071c:	40014400 	.word	0x40014400

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_USART2_UART_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_USART2_UART_Init+0x58>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x58>)
 8000764:	f003 fb70 	bl	8003e48 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f855 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000c0 	.word	0x200000c0
 800077c:	40004400 	.word	0x40004400

08000780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_DMA_Init+0x38>)
 8000788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <MX_DMA_Init+0x38>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6493      	str	r3, [r2, #72]	; 0x48
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_DMA_Init+0x38>)
 8000794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2011      	movs	r0, #17
 80007a4:	f000 fb8b 	bl	8000ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007a8:	2011      	movs	r0, #17
 80007aa:	f000 fba4 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2120      	movs	r1, #32
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 ff2c 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80007f4:	2320      	movs	r3, #32
 80007f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f000 fd74 	bl	80012f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	; 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	; 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000880:	d10c      	bne.n	800089c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800089a:	e022      	b.n	80008e2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_TIM_Base_MspInit+0x84>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d10c      	bne.n	80008c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6593      	str	r3, [r2, #88]	; 0x58
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
}
 80008be:	e010      	b.n	80008e2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <HAL_TIM_Base_MspInit+0x88>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d10b      	bne.n	80008e2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	6613      	str	r3, [r2, #96]	; 0x60
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_TIM_Base_MspInit+0x80>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
}
 80008e2:	bf00      	nop
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40000400 	.word	0x40000400
 80008f8:	40014400 	.word	0x40014400

080008fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800091c:	d11d      	bne.n	800095a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <HAL_TIM_MspPostInit+0xac>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <HAL_TIM_MspPostInit+0xac>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_TIM_MspPostInit+0xac>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000936:	2301      	movs	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000946:	2301      	movs	r3, #1
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fcd0 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000958:	e021      	b.n	800099e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <HAL_TIM_MspPostInit+0xb0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d11c      	bne.n	800099e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_TIM_MspPostInit+0xac>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_TIM_MspPostInit+0xac>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_TIM_MspPostInit+0xac>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800098c:	2302      	movs	r3, #2
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 fcad 	bl	80012f8 <HAL_GPIO_Init>
}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40000400 	.word	0x40000400

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0ac      	sub	sp, #176	; 0xb0
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2288      	movs	r2, #136	; 0x88
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f004 faa8 	bl	8004f26 <memset>
  if(huart->Instance==USART2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <HAL_UART_MspInit+0x114>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d16c      	bne.n	8000aba <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fca9 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f8:	f7ff ff10 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fc:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <HAL_UART_MspInit+0x118>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a00:	4a31      	ldr	r2, [pc, #196]	; (8000ac8 <HAL_UART_MspInit+0x118>)
 8000a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a06:	6593      	str	r3, [r2, #88]	; 0x58
 8000a08:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <HAL_UART_MspInit+0x118>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <HAL_UART_MspInit+0x118>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	4a2b      	ldr	r2, [pc, #172]	; (8000ac8 <HAL_UART_MspInit+0x118>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <HAL_UART_MspInit+0x118>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a44:	2307      	movs	r3, #7
 8000a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 fc50 	bl	80012f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_UART_MspInit+0x120>)
 8000a5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a66:	2210      	movs	r2, #16
 8000a68:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a8e:	480f      	ldr	r0, [pc, #60]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000a90:	f000 fa4c 	bl	8000f2c <HAL_DMA_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000a9a:	f7ff febf 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000aa2:	671a      	str	r2, [r3, #112]	; 0x70
 8000aa4:	4a09      	ldr	r2, [pc, #36]	; (8000acc <HAL_UART_MspInit+0x11c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2026      	movs	r0, #38	; 0x26
 8000ab0:	f000 fa05 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f000 fa1e 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	37b0      	adds	r7, #176	; 0xb0
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	20000148 	.word	0x20000148
 8000ad0:	40020080 	.word	0x40020080

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f8ae 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA1_Channel7_IRQHandler+0x10>)
 8000b2e:	f000 fb34 	bl	800119a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000148 	.word	0x20000148

08000b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <USART2_IRQHandler+0x10>)
 8000b42:	f003 f9cf 	bl	8003ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000c0 	.word	0x200000c0

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b78:	f7ff ffea 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	; (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f004 f9c9 	bl	8004f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba6:	f7ff fc8d 	bl	80004c4 <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb8:	08004ff0 	.word	0x08004ff0
  ldr r2, =_sbss
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc0:	20000198 	.word	0x20000198

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_Init+0x3c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_Init+0x3c>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bdc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 f962 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 f80f 	bl	8000c08 <HAL_InitTick>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	e001      	b.n	8000bfa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf6:	f7ff fe17 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d023      	beq.n	8000c64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_InitTick+0x70>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f96d 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10f      	bne.n	8000c5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d809      	bhi.n	8000c58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f937 	bl	8000ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x74>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e007      	b.n	8000c68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e004      	b.n	8000c68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e001      	b.n	8000c68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000194 	.word	0x20000194

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000194 	.word	0x20000194

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffde 	bl	8000ca8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff29 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff3e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff31 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e098      	b.n	8001070 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b4d      	ldr	r3, [pc, #308]	; (800107c <HAL_DMA_Init+0x150>)
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d80f      	bhi.n	8000f6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <HAL_DMA_Init+0x154>)
 8000f52:	4413      	add	r3, r2
 8000f54:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_DMA_Init+0x158>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	009a      	lsls	r2, r3, #2
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a48      	ldr	r2, [pc, #288]	; (8001088 <HAL_DMA_Init+0x15c>)
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40
 8000f68:	e00e      	b.n	8000f88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <HAL_DMA_Init+0x160>)
 8000f72:	4413      	add	r3, r2
 8000f74:	4a43      	ldr	r2, [pc, #268]	; (8001084 <HAL_DMA_Init+0x158>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	009a      	lsls	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_DMA_Init+0x164>)
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fe2:	d039      	beq.n	8001058 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <HAL_DMA_Init+0x15c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d11a      	bne.n	8001024 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_DMA_Init+0x168>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f003 031c 	and.w	r3, r3, #28
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	4924      	ldr	r1, [pc, #144]	; (8001094 <HAL_DMA_Init+0x168>)
 8001004:	4013      	ands	r3, r2
 8001006:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_DMA_Init+0x168>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6859      	ldr	r1, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	f003 031c 	and.w	r3, r3, #28
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	491d      	ldr	r1, [pc, #116]	; (8001094 <HAL_DMA_Init+0x168>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
 8001022:	e019      	b.n	8001058 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_DMA_Init+0x16c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f003 031c 	and.w	r3, r3, #28
 8001030:	210f      	movs	r1, #15
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	4917      	ldr	r1, [pc, #92]	; (8001098 <HAL_DMA_Init+0x16c>)
 800103a:	4013      	ands	r3, r2
 800103c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_DMA_Init+0x16c>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6859      	ldr	r1, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f003 031c 	and.w	r3, r3, #28
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	4911      	ldr	r1, [pc, #68]	; (8001098 <HAL_DMA_Init+0x16c>)
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40020407 	.word	0x40020407
 8001080:	bffdfff8 	.word	0xbffdfff8
 8001084:	cccccccd 	.word	0xcccccccd
 8001088:	40020000 	.word	0x40020000
 800108c:	bffdfbf8 	.word	0xbffdfbf8
 8001090:	40020400 	.word	0x40020400
 8001094:	400200a8 	.word	0x400200a8
 8001098:	400204a8 	.word	0x400204a8

0800109c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d008      	beq.n	80010c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e022      	b.n	800110c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 020e 	bic.w	r2, r2, #14
 80010d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f003 021c 	and.w	r2, r3, #28
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d005      	beq.n	800113c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2204      	movs	r2, #4
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e029      	b.n	8001190 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 020e 	bic.w	r2, r2, #14
 800114a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001160:	f003 021c 	and.w	r2, r3, #28
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	4798      	blx	r3
    }
  }
  return status;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f003 031c 	and.w	r3, r3, #28
 80011ba:	2204      	movs	r2, #4
 80011bc:	409a      	lsls	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d026      	beq.n	8001214 <HAL_DMA_IRQHandler+0x7a>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d107      	bne.n	80011ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0204 	bic.w	r2, r2, #4
 80011ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f003 021c 	and.w	r2, r3, #28
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	2104      	movs	r1, #4
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	2b00      	cmp	r3, #0
 8001208:	d071      	beq.n	80012ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001212:	e06c      	b.n	80012ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f003 031c 	and.w	r3, r3, #28
 800121c:	2202      	movs	r2, #2
 800121e:	409a      	lsls	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d02e      	beq.n	8001286 <HAL_DMA_IRQHandler+0xec>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d029      	beq.n	8001286 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 020a 	bic.w	r2, r2, #10
 800124e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f003 021c 	and.w	r2, r3, #28
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	2102      	movs	r1, #2
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	2b00      	cmp	r3, #0
 800127a:	d038      	beq.n	80012ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001284:	e033      	b.n	80012ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f003 031c 	and.w	r3, r3, #28
 800128e:	2208      	movs	r2, #8
 8001290:	409a      	lsls	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d02a      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x156>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d025      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 020e 	bic.w	r2, r2, #14
 80012b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b8:	f003 021c 	and.w	r2, r3, #28
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
}
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	e17f      	b.n	8001608 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8171 	beq.w	8001602 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d005      	beq.n	8001338 <HAL_GPIO_Init+0x40>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d130      	bne.n	800139a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800136e:	2201      	movs	r2, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f003 0201 	and.w	r2, r3, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d118      	bne.n	80013d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013ac:	2201      	movs	r2, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d017      	beq.n	8001414 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	6939      	ldr	r1, [r7, #16]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80ac 	beq.w	8001602 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_GPIO_Init+0x330>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <HAL_GPIO_Init+0x330>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6613      	str	r3, [r2, #96]	; 0x60
 80014b6:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <HAL_GPIO_Init+0x330>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c2:	4a5a      	ldr	r2, [pc, #360]	; (800162c <HAL_GPIO_Init+0x334>)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	3302      	adds	r3, #2
 80014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ec:	d025      	beq.n	800153a <HAL_GPIO_Init+0x242>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4f      	ldr	r2, [pc, #316]	; (8001630 <HAL_GPIO_Init+0x338>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d01f      	beq.n	8001536 <HAL_GPIO_Init+0x23e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4e      	ldr	r2, [pc, #312]	; (8001634 <HAL_GPIO_Init+0x33c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d019      	beq.n	8001532 <HAL_GPIO_Init+0x23a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4d      	ldr	r2, [pc, #308]	; (8001638 <HAL_GPIO_Init+0x340>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0x236>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4c      	ldr	r2, [pc, #304]	; (800163c <HAL_GPIO_Init+0x344>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00d      	beq.n	800152a <HAL_GPIO_Init+0x232>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4b      	ldr	r2, [pc, #300]	; (8001640 <HAL_GPIO_Init+0x348>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x22e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4a      	ldr	r2, [pc, #296]	; (8001644 <HAL_GPIO_Init+0x34c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x22a>
 800151e:	2306      	movs	r3, #6
 8001520:	e00c      	b.n	800153c <HAL_GPIO_Init+0x244>
 8001522:	2307      	movs	r3, #7
 8001524:	e00a      	b.n	800153c <HAL_GPIO_Init+0x244>
 8001526:	2305      	movs	r3, #5
 8001528:	e008      	b.n	800153c <HAL_GPIO_Init+0x244>
 800152a:	2304      	movs	r3, #4
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x244>
 800152e:	2303      	movs	r3, #3
 8001530:	e004      	b.n	800153c <HAL_GPIO_Init+0x244>
 8001532:	2302      	movs	r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x244>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x244>
 800153a:	2300      	movs	r3, #0
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	f002 0203 	and.w	r2, r2, #3
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	4093      	lsls	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800154c:	4937      	ldr	r1, [pc, #220]	; (800162c <HAL_GPIO_Init+0x334>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_GPIO_Init+0x350>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800157e:	4a32      	ldr	r2, [pc, #200]	; (8001648 <HAL_GPIO_Init+0x350>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <HAL_GPIO_Init+0x350>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d2:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	f47f ae78 	bne.w	8001308 <HAL_GPIO_Init+0x10>
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000
 8001630:	48000400 	.word	0x48000400
 8001634:	48000800 	.word	0x48000800
 8001638:	48000c00 	.word	0x48000c00
 800163c:	48001000 	.word	0x48001000
 8001640:	48001400 	.word	0x48001400
 8001644:	48001800 	.word	0x48001800
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001668:	e002      	b.n	8001670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_PWREx_GetVoltageRange+0x18>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40007000 	.word	0x40007000

08001698 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a6:	d130      	bne.n	800170a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b4:	d038      	beq.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2232      	movs	r2, #50	; 0x32
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9b      	lsrs	r3, r3, #18
 80016d8:	3301      	adds	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016dc:	e002      	b.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f0:	d102      	bne.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f2      	bne.n	80016de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001704:	d110      	bne.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e00f      	b.n	800172a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001716:	d007      	beq.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40007000 	.word	0x40007000
 800173c:	20000000 	.word	0x20000000
 8001740:	431bde83 	.word	0x431bde83

08001744 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e3ca      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4b97      	ldr	r3, [pc, #604]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	4b94      	ldr	r3, [pc, #592]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80e4 	beq.w	8001940 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_RCC_OscConfig+0x4a>
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b0c      	cmp	r3, #12
 8001782:	f040 808b 	bne.w	800189c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b01      	cmp	r3, #1
 800178a:	f040 8087 	bne.w	800189c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800178e:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x62>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e3a2      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4b82      	ldr	r3, [pc, #520]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <HAL_RCC_OscConfig+0x7c>
 80017b6:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017be:	e005      	b.n	80017cc <HAL_RCC_OscConfig+0x88>
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d223      	bcs.n	8001818 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fd55 	bl	8002284 <RCC_SetFlashLatencyFromMSIRange>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e383      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e4:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a72      	ldr	r2, [pc, #456]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b70      	ldr	r3, [pc, #448]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	496d      	ldr	r1, [pc, #436]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001802:	4b6c      	ldr	r3, [pc, #432]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	4968      	ldr	r1, [pc, #416]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
 8001816:	e025      	b.n	8001864 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001818:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a65      	ldr	r2, [pc, #404]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b63      	ldr	r3, [pc, #396]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4960      	ldr	r1, [pc, #384]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001836:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	495b      	ldr	r1, [pc, #364]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d109      	bne.n	8001864 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fd15 	bl	8002284 <RCC_SetFlashLatencyFromMSIRange>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e343      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001864:	f000 fc4a 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8001868:	4602      	mov	r2, r0
 800186a:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	4950      	ldr	r1, [pc, #320]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001876:	5ccb      	ldrb	r3, [r1, r3]
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
 8001880:	4a4e      	ldr	r2, [pc, #312]	; (80019bc <HAL_RCC_OscConfig+0x278>)
 8001882:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001884:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f9bd 	bl	8000c08 <HAL_InitTick>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d052      	beq.n	800193e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	e327      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d032      	beq.n	800190a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b0:	f7ff f9fa 	bl	8000ca8 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b8:	f7ff f9f6 	bl	8000ca8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e310      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a36      	ldr	r2, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4931      	ldr	r1, [pc, #196]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	492c      	ldr	r1, [pc, #176]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
 8001908:	e01a      	b.n	8001940 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001916:	f7ff f9c7 	bl	8000ca8 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800191e:	f7ff f9c3 	bl	8000ca8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e2dd      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x1da>
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800193e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d074      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x21a>
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b0c      	cmp	r3, #12
 8001956:	d10e      	bne.n	8001976 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d10b      	bne.n	8001976 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d064      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d160      	bne.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e2ba      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x24a>
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e026      	b.n	80019dc <HAL_RCC_OscConfig+0x298>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001996:	d115      	bne.n	80019c4 <HAL_RCC_OscConfig+0x280>
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800199e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a02      	ldr	r2, [pc, #8]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	e014      	b.n	80019dc <HAL_RCC_OscConfig+0x298>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	08004f98 	.word	0x08004f98
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004
 80019c4:	4ba0      	ldr	r3, [pc, #640]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a9f      	ldr	r2, [pc, #636]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b9d      	ldr	r3, [pc, #628]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a9c      	ldr	r2, [pc, #624]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f960 	bl	8000ca8 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f95c 	bl	8000ca8 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e276      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fe:	4b92      	ldr	r3, [pc, #584]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x2a8>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f94c 	bl	8000ca8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f948 	bl	8000ca8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e262      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2d0>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d060      	beq.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_OscConfig+0x310>
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d116      	bne.n	8001a82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a54:	4b7c      	ldr	r3, [pc, #496]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_OscConfig+0x328>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e23f      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	4973      	ldr	r1, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a80:	e040      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d023      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8a:	4b6f      	ldr	r3, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6e      	ldr	r2, [pc, #440]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f907 	bl	8000ca8 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f903 	bl	8000ca8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e21d      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	4b65      	ldr	r3, [pc, #404]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	495f      	ldr	r1, [pc, #380]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
 8001ad0:	e018      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad2:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff f8e3 	bl	8000ca8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f8df 	bl	8000ca8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1f9      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03c      	beq.n	8001b8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b18:	4b4b      	ldr	r3, [pc, #300]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1e:	4a4a      	ldr	r2, [pc, #296]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b28:	f7ff f8be 	bl	8000ca8 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff f8ba 	bl	8000ca8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1d4      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0ef      	beq.n	8001b30 <HAL_RCC_OscConfig+0x3ec>
 8001b50:	e01b      	b.n	8001b8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b52:	4b3d      	ldr	r3, [pc, #244]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b58:	4a3b      	ldr	r2, [pc, #236]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff f8a1 	bl	8000ca8 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff f89d 	bl	8000ca8 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1b7      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ef      	bne.n	8001b6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80a6 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	4a26      	ldr	r2, [pc, #152]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_OscConfig+0x508>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d118      	bne.n	8001c02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_RCC_OscConfig+0x508>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_RCC_OscConfig+0x508>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f864 	bl	8000ca8 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be4:	f7ff f860 	bl	8000ca8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e17a      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_RCC_OscConfig+0x508>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4d8>
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1a:	e029      	b.n	8001c70 <HAL_RCC_OscConfig+0x52c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d115      	bne.n	8001c50 <HAL_RCC_OscConfig+0x50c>
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c44:	e014      	b.n	8001c70 <HAL_RCC_OscConfig+0x52c>
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	4b9c      	ldr	r3, [pc, #624]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	4a9b      	ldr	r2, [pc, #620]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c60:	4b98      	ldr	r3, [pc, #608]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	4a97      	ldr	r2, [pc, #604]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d016      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff f816 	bl	8000ca8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c80:	f7ff f812 	bl	8000ca8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e12a      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c96:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ed      	beq.n	8001c80 <HAL_RCC_OscConfig+0x53c>
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca6:	f7fe ffff 	bl	8000ca8 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7fe fffb 	bl	8000ca8 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e113      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc4:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ed      	bne.n	8001cae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd2:	7ffb      	ldrb	r3, [r7, #31]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd8:	4b7a      	ldr	r3, [pc, #488]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	4a79      	ldr	r2, [pc, #484]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80fe 	beq.w	8001eea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	f040 80d0 	bne.w	8001e98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cf8:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d130      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	3b01      	subs	r3, #1
 8001d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d127      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d38:	2a07      	cmp	r2, #7
 8001d3a:	bf14      	ite	ne
 8001d3c:	2201      	movne	r2, #1
 8001d3e:	2200      	moveq	r2, #0
 8001d40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d113      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	3b01      	subs	r3, #1
 8001d68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d06e      	beq.n	8001e4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	d069      	beq.n	8001e48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0ad      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d9c:	f7fe ff84 	bl	8000ca8 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe ff80 	bl	8000ca8 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e09a      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_RCC_OscConfig+0x784>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dd2:	3a01      	subs	r2, #1
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ddc:	0212      	lsls	r2, r2, #8
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001de4:	0852      	lsrs	r2, r2, #1
 8001de6:	3a01      	subs	r2, #1
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001df0:	0852      	lsrs	r2, r2, #1
 8001df2:	3a01      	subs	r2, #1
 8001df4:	0652      	lsls	r2, r2, #25
 8001df6:	4311      	orrs	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dfc:	0912      	lsrs	r2, r2, #4
 8001dfe:	0452      	lsls	r2, r2, #17
 8001e00:	430a      	orrs	r2, r1
 8001e02:	4930      	ldr	r1, [pc, #192]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e08:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e20:	f7fe ff42 	bl	8000ca8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe ff3e 	bl	8000ca8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e058      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e46:	e050      	b.n	8001eea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e04f      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d148      	bne.n	8001eea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e70:	f7fe ff1a 	bl	8000ca8 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7fe ff16 	bl	8000ca8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e030      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x734>
 8001e96:	e028      	b.n	8001eea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d023      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x780>)
 8001ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fefd 	bl	8000ca8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	e00c      	b.n	8001ecc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7fe fef9 	bl	8000ca8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d905      	bls.n	8001ecc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e013      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_OscConfig+0x7b0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ec      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_OscConfig+0x7b0>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	4905      	ldr	r1, [pc, #20]	; (8001ef4 <HAL_RCC_OscConfig+0x7b0>)
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_OscConfig+0x7b4>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
 8001ee4:	e001      	b.n	8001eea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	feeefffc 	.word	0xfeeefffc

08001efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0e7      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b75      	ldr	r3, [pc, #468]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d910      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b72      	ldr	r3, [pc, #456]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	4970      	ldr	r1, [pc, #448]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0cf      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d010      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4b66      	ldr	r3, [pc, #408]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d908      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4960      	ldr	r1, [pc, #384]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04c      	beq.n	8002014 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d121      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0a6      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9a:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d115      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e09a      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb2:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e08e      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e086      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4943      	ldr	r1, [pc, #268]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fe60 	bl	8000ca8 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7fe fe5c 	bl	8000ca8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e06e      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	429a      	cmp	r2, r3
 800202e:	d208      	bcs.n	8002042 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	492b      	ldr	r1, [pc, #172]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d210      	bcs.n	8002072 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 0207 	bic.w	r2, r3, #7
 8002058:	4923      	ldr	r1, [pc, #140]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d001      	beq.n	8002072 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e036      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4918      	ldr	r1, [pc, #96]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d009      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4910      	ldr	r1, [pc, #64]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b0:	f000 f824 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	490b      	ldr	r1, [pc, #44]	; (80020f0 <HAL_RCC_ClockConfig+0x1f4>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1fc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fd97 	bl	8000c08 <HAL_InitTick>
 80020da:	4603      	mov	r3, r0
 80020dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80020de:	7afb      	ldrb	r3, [r7, #11]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08004f98 	.word	0x08004f98
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000004 	.word	0x20000004

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x34>
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d121      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d11e      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e005      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_RCC_GetSysClockFreq+0x10c>)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10d      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d102      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCC_GetSysClockFreq+0x110>)
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	e004      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d101      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_RCC_GetSysClockFreq+0x114>)
 8002182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d134      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d003      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xac>
 80021a0:	e005      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_RCC_GetSysClockFreq+0x110>)
 80021a4:	617b      	str	r3, [r7, #20]
      break;
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_GetSysClockFreq+0x114>)
 80021aa:	617b      	str	r3, [r7, #20]
      break;
 80021ac:	e002      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	617b      	str	r3, [r7, #20]
      break;
 80021b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	3301      	adds	r3, #1
 80021c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	fb03 f202 	mul.w	r2, r3, r2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	0e5b      	lsrs	r3, r3, #25
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	3301      	adds	r3, #1
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021f4:	69bb      	ldr	r3, [r7, #24]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	08004fb0 	.word	0x08004fb0
 800220c:	00f42400 	.word	0x00f42400
 8002210:	007a1200 	.word	0x007a1200

08002214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCC_GetHCLKFreq+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002230:	f7ff fff0 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4904      	ldr	r1, [pc, #16]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	08004fa8 	.word	0x08004fa8

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800225c:	f7ff ffda 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0adb      	lsrs	r3, r3, #11
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4904      	ldr	r1, [pc, #16]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	08004fa8 	.word	0x08004fa8

08002284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002290:	4b2a      	ldr	r3, [pc, #168]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800229c:	f7ff f9ee 	bl	800167c <HAL_PWREx_GetVoltageRange>
 80022a0:	6178      	str	r0, [r7, #20]
 80022a2:	e014      	b.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
 80022b0:	4b22      	ldr	r3, [pc, #136]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022bc:	f7ff f9de 	bl	800167c <HAL_PWREx_GetVoltageRange>
 80022c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d4:	d10b      	bne.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d919      	bls.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2ba0      	cmp	r3, #160	; 0xa0
 80022e0:	d902      	bls.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e2:	2302      	movs	r3, #2
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e013      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e8:	2301      	movs	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e010      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b80      	cmp	r3, #128	; 0x80
 80022f2:	d902      	bls.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022f4:	2303      	movs	r3, #3
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e00a      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d102      	bne.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002300:	2302      	movs	r3, #2
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e004      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b70      	cmp	r3, #112	; 0x70
 800230a:	d101      	bne.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800230c:	2301      	movs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 0207 	bic.w	r2, r3, #7
 8002318:	4909      	ldr	r1, [pc, #36]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	40022000 	.word	0x40022000

08002344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800234c:	2300      	movs	r3, #0
 800234e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002350:	2300      	movs	r3, #0
 8002352:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800235c:	2b00      	cmp	r3, #0
 800235e:	d041      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002364:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002368:	d02a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800236a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800236e:	d824      	bhi.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002370:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002374:	d008      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002376:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800237a:	d81e      	bhi.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002384:	d010      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002386:	e018      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002388:	4b86      	ldr	r3, [pc, #536]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a85      	ldr	r2, [pc, #532]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002394:	e015      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fabb 	bl	8002918 <RCCEx_PLLSAI1_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a6:	e00c      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3320      	adds	r3, #32
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fba6 	bl	8002b00 <RCCEx_PLLSAI2_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b8:	e003      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	74fb      	strb	r3, [r7, #19]
      break;
 80023be:	e000      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023c8:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d6:	4973      	ldr	r1, [pc, #460]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023de:	e001      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d041      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023f8:	d02a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023fe:	d824      	bhi.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002404:	d008      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800240a:	d81e      	bhi.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d010      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002416:	e018      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002418:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a61      	ldr	r2, [pc, #388]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002422:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002424:	e015      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fa73 	bl	8002918 <RCCEx_PLLSAI1_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002436:	e00c      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3320      	adds	r3, #32
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fb5e 	bl	8002b00 <RCCEx_PLLSAI2_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002448:	e003      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	74fb      	strb	r3, [r7, #19]
      break;
 800244e:	e000      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10b      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002458:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002466:	494f      	ldr	r1, [pc, #316]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800246e:	e001      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a0 	beq.w	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00d      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249c:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	4a40      	ldr	r2, [pc, #256]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a6:	6593      	str	r3, [r2, #88]	; 0x58
 80024a8:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b4:	2301      	movs	r3, #1
 80024b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fbf0 	bl	8000ca8 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ca:	e009      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7fe fbec 	bl	8000ca8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d902      	bls.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	74fb      	strb	r3, [r7, #19]
        break;
 80024de:	e005      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ef      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d15c      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01f      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	d019      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe fbab 	bl	8000ca8 <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002554:	e00b      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fba7 	bl	8000ca8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d902      	bls.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	74fb      	strb	r3, [r7, #19]
            break;
 800256c:	e006      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ec      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002592:	4904      	ldr	r1, [pc, #16]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800259a:	e009      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	74bb      	strb	r3, [r7, #18]
 80025a0:	e006      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b0:	7c7b      	ldrb	r3, [r7, #17]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b9e      	ldr	r3, [pc, #632]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	4a9d      	ldr	r2, [pc, #628]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ce:	4b98      	ldr	r3, [pc, #608]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f023 0203 	bic.w	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	4994      	ldr	r1, [pc, #592]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f0:	4b8f      	ldr	r3, [pc, #572]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 020c 	bic.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	498c      	ldr	r1, [pc, #560]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002612:	4b87      	ldr	r3, [pc, #540]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	4983      	ldr	r1, [pc, #524]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002634:	4b7e      	ldr	r3, [pc, #504]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	497b      	ldr	r1, [pc, #492]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002656:	4b76      	ldr	r3, [pc, #472]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002664:	4972      	ldr	r1, [pc, #456]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002678:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	496a      	ldr	r1, [pc, #424]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800269a:	4b65      	ldr	r3, [pc, #404]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	4961      	ldr	r1, [pc, #388]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026bc:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	4959      	ldr	r1, [pc, #356]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026de:	4b54      	ldr	r3, [pc, #336]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ec:	4950      	ldr	r1, [pc, #320]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002700:	4b4b      	ldr	r3, [pc, #300]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	4948      	ldr	r1, [pc, #288]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002722:	4b43      	ldr	r3, [pc, #268]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	493f      	ldr	r1, [pc, #252]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d028      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002752:	4937      	ldr	r1, [pc, #220]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002762:	d106      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a31      	ldr	r2, [pc, #196]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276e:	60d3      	str	r3, [r2, #12]
 8002770:	e011      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800277a:	d10c      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3304      	adds	r3, #4
 8002780:	2101      	movs	r1, #1
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f8c8 	bl	8002918 <RCCEx_PLLSAI1_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d028      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	491f      	ldr	r1, [pc, #124]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c0:	d106      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027cc:	60d3      	str	r3, [r2, #12]
 80027ce:	e011      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f899 	bl	8002918 <RCCEx_PLLSAI1_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d02b      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281e:	d109      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a02      	ldr	r2, [pc, #8]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282a:	60d3      	str	r3, [r2, #12]
 800282c:	e014      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800283c:	d10c      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2101      	movs	r1, #1
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f867 	bl	8002918 <RCCEx_PLLSAI1_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d02f      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002864:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002872:	4928      	ldr	r1, [pc, #160]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002882:	d10d      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	2102      	movs	r1, #2
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f844 	bl	8002918 <RCCEx_PLLSAI1_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d014      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	74bb      	strb	r3, [r7, #18]
 800289e:	e011      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3320      	adds	r3, #32
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 f925 	bl	8002b00 <RCCEx_PLLSAI2_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028de:	490d      	ldr	r1, [pc, #52]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002902:	4904      	ldr	r1, [pc, #16]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800290a:	7cbb      	ldrb	r3, [r7, #18]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000

08002918 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002926:	4b75      	ldr	r3, [pc, #468]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002932:	4b72      	ldr	r3, [pc, #456]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0203 	and.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d10d      	bne.n	800295e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
       ||
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800294a:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
       ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d047      	beq.n	80029ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	e044      	b.n	80029ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d018      	beq.n	800299e <RCCEx_PLLSAI1_Config+0x86>
 800296c:	2b03      	cmp	r3, #3
 800296e:	d825      	bhi.n	80029bc <RCCEx_PLLSAI1_Config+0xa4>
 8002970:	2b01      	cmp	r3, #1
 8002972:	d002      	beq.n	800297a <RCCEx_PLLSAI1_Config+0x62>
 8002974:	2b02      	cmp	r3, #2
 8002976:	d009      	beq.n	800298c <RCCEx_PLLSAI1_Config+0x74>
 8002978:	e020      	b.n	80029bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800297a:	4b60      	ldr	r3, [pc, #384]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11d      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298a:	e01a      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800298c:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d116      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299c:	e013      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800299e:	4b57      	ldr	r3, [pc, #348]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029aa:	4b54      	ldr	r3, [pc, #336]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ba:	e006      	b.n	80029ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      break;
 80029c0:	e004      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c2:	bf00      	nop
 80029c4:	e002      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029d2:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	430b      	orrs	r3, r1
 80029e8:	4944      	ldr	r1, [pc, #272]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d17d      	bne.n	8002af0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a40      	ldr	r2, [pc, #256]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a00:	f7fe f952 	bl	8000ca8 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a06:	e009      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a08:	f7fe f94e 	bl	8000ca8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d902      	bls.n	8002a1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	73fb      	strb	r3, [r7, #15]
        break;
 8002a1a:	e005      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a1c:	4b37      	ldr	r3, [pc, #220]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ef      	bne.n	8002a08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d160      	bne.n	8002af0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d111      	bne.n	8002a58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a34:	4b31      	ldr	r3, [pc, #196]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6892      	ldr	r2, [r2, #8]
 8002a44:	0211      	lsls	r1, r2, #8
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	0912      	lsrs	r2, r2, #4
 8002a4c:	0452      	lsls	r2, r2, #17
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	492a      	ldr	r1, [pc, #168]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	610b      	str	r3, [r1, #16]
 8002a56:	e027      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d112      	bne.n	8002a84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6892      	ldr	r2, [r2, #8]
 8002a6e:	0211      	lsls	r1, r2, #8
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6912      	ldr	r2, [r2, #16]
 8002a74:	0852      	lsrs	r2, r2, #1
 8002a76:	3a01      	subs	r2, #1
 8002a78:	0552      	lsls	r2, r2, #21
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	491f      	ldr	r1, [pc, #124]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	610b      	str	r3, [r1, #16]
 8002a82:	e011      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	0211      	lsls	r1, r2, #8
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6952      	ldr	r2, [r2, #20]
 8002a9a:	0852      	lsrs	r2, r2, #1
 8002a9c:	3a01      	subs	r2, #1
 8002a9e:	0652      	lsls	r2, r2, #25
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	4916      	ldr	r1, [pc, #88]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a13      	ldr	r2, [pc, #76]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe f8f8 	bl	8000ca8 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aba:	e009      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002abc:	f7fe f8f4 	bl	8000ca8 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ace:	e005      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	4904      	ldr	r1, [pc, #16]	; (8002afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b0e:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d018      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b1a:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0203 	and.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d10d      	bne.n	8002b46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b32:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
       ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d047      	beq.n	8002bd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e044      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d018      	beq.n	8002b86 <RCCEx_PLLSAI2_Config+0x86>
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d825      	bhi.n	8002ba4 <RCCEx_PLLSAI2_Config+0xa4>
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d002      	beq.n	8002b62 <RCCEx_PLLSAI2_Config+0x62>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d009      	beq.n	8002b74 <RCCEx_PLLSAI2_Config+0x74>
 8002b60:	e020      	b.n	8002ba4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b62:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11d      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b72:	e01a      	b.n	8002baa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d116      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b84:	e013      	b.n	8002bae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b86:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10f      	bne.n	8002bb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b92:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ba2:	e006      	b.n	8002bb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba8:	e004      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bba:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	4939      	ldr	r1, [pc, #228]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d167      	bne.n	8002cac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bdc:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a35      	ldr	r2, [pc, #212]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe f85e 	bl	8000ca8 <HAL_GetTick>
 8002bec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bee:	e009      	b.n	8002c04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bf0:	f7fe f85a 	bl	8000ca8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d902      	bls.n	8002c04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	73fb      	strb	r3, [r7, #15]
        break;
 8002c02:	e005      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ef      	bne.n	8002bf0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d14a      	bne.n	8002cac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d111      	bne.n	8002c40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c1c:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	0211      	lsls	r1, r2, #8
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	0912      	lsrs	r2, r2, #4
 8002c34:	0452      	lsls	r2, r2, #17
 8002c36:	430a      	orrs	r2, r1
 8002c38:	491f      	ldr	r1, [pc, #124]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	614b      	str	r3, [r1, #20]
 8002c3e:	e011      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	0211      	lsls	r1, r2, #8
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6912      	ldr	r2, [r2, #16]
 8002c56:	0852      	lsrs	r2, r2, #1
 8002c58:	3a01      	subs	r2, #1
 8002c5a:	0652      	lsls	r2, r2, #25
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c64:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe f81a 	bl	8000ca8 <HAL_GetTick>
 8002c74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c76:	e009      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c78:	f7fe f816 	bl	8000ca8 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	73fb      	strb	r3, [r7, #15]
          break;
 8002c8a:	e005      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ef      	beq.n	8002c78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000

08002cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e049      	b.n	8002d62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fd fdc4 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 fbec 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e04f      	b.n	8002e24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dae:	d018      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d115      	bne.n	8002e0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	d015      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0xb4>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfa:	d011      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0c:	e008      	b.n	8002e20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e000      	b.n	8002e22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40000c00 	.word	0x40000c00
 8002e40:	40013400 	.word	0x40013400
 8002e44:	40014000 	.word	0x40014000
 8002e48:	00010007 	.word	0x00010007

08002e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e049      	b.n	8002ef2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f841 	bl	8002efa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 fb24 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_TIM_PWM_Start+0x24>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e03c      	b.n	8002fae <HAL_TIM_PWM_Start+0x9e>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d109      	bne.n	8002f4e <HAL_TIM_PWM_Start+0x3e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	e02f      	b.n	8002fae <HAL_TIM_PWM_Start+0x9e>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d109      	bne.n	8002f68 <HAL_TIM_PWM_Start+0x58>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	bf14      	ite	ne
 8002f60:	2301      	movne	r3, #1
 8002f62:	2300      	moveq	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e022      	b.n	8002fae <HAL_TIM_PWM_Start+0x9e>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d109      	bne.n	8002f82 <HAL_TIM_PWM_Start+0x72>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	e015      	b.n	8002fae <HAL_TIM_PWM_Start+0x9e>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d109      	bne.n	8002f9c <HAL_TIM_PWM_Start+0x8c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e008      	b.n	8002fae <HAL_TIM_PWM_Start+0x9e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e09c      	b.n	80030f0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0xb6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc4:	e023      	b.n	800300e <HAL_TIM_PWM_Start+0xfe>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d104      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0xc6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd4:	e01b      	b.n	800300e <HAL_TIM_PWM_Start+0xfe>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d104      	bne.n	8002fe6 <HAL_TIM_PWM_Start+0xd6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe4:	e013      	b.n	800300e <HAL_TIM_PWM_Start+0xfe>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0xe6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ff4:	e00b      	b.n	800300e <HAL_TIM_PWM_Start+0xfe>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start+0xf6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003004:	e003      	b.n	800300e <HAL_TIM_PWM_Start+0xfe>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2201      	movs	r2, #1
 8003014:	6839      	ldr	r1, [r7, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fe68 	bl	8003cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <HAL_TIM_PWM_Start+0x1e8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_TIM_PWM_Start+0x13e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a34      	ldr	r2, [pc, #208]	; (80030fc <HAL_TIM_PWM_Start+0x1ec>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_TIM_PWM_Start+0x13e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a32      	ldr	r2, [pc, #200]	; (8003100 <HAL_TIM_PWM_Start+0x1f0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_TIM_PWM_Start+0x13e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a31      	ldr	r2, [pc, #196]	; (8003104 <HAL_TIM_PWM_Start+0x1f4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_TIM_PWM_Start+0x13e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <HAL_TIM_PWM_Start+0x1f8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_TIM_PWM_Start+0x142>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_TIM_PWM_Start+0x144>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <HAL_TIM_PWM_Start+0x1e8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01d      	beq.n	80030ae <HAL_TIM_PWM_Start+0x19e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307a:	d018      	beq.n	80030ae <HAL_TIM_PWM_Start+0x19e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a22      	ldr	r2, [pc, #136]	; (800310c <HAL_TIM_PWM_Start+0x1fc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_TIM_PWM_Start+0x19e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a21      	ldr	r2, [pc, #132]	; (8003110 <HAL_TIM_PWM_Start+0x200>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00e      	beq.n	80030ae <HAL_TIM_PWM_Start+0x19e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <HAL_TIM_PWM_Start+0x204>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d009      	beq.n	80030ae <HAL_TIM_PWM_Start+0x19e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a17      	ldr	r2, [pc, #92]	; (80030fc <HAL_TIM_PWM_Start+0x1ec>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d004      	beq.n	80030ae <HAL_TIM_PWM_Start+0x19e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a15      	ldr	r2, [pc, #84]	; (8003100 <HAL_TIM_PWM_Start+0x1f0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d115      	bne.n	80030da <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_TIM_PWM_Start+0x208>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b06      	cmp	r3, #6
 80030be:	d015      	beq.n	80030ec <HAL_TIM_PWM_Start+0x1dc>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c6:	d011      	beq.n	80030ec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d8:	e008      	b.n	80030ec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e000      	b.n	80030ee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40013400 	.word	0x40013400
 8003100:	40014000 	.word	0x40014000
 8003104:	40014400 	.word	0x40014400
 8003108:	40014800 	.word	0x40014800
 800310c:	40000400 	.word	0x40000400
 8003110:	40000800 	.word	0x40000800
 8003114:	40000c00 	.word	0x40000c00
 8003118:	00010007 	.word	0x00010007

0800311c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003136:	2302      	movs	r3, #2
 8003138:	e0ff      	b.n	800333a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b14      	cmp	r3, #20
 8003146:	f200 80f0 	bhi.w	800332a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	080031a5 	.word	0x080031a5
 8003154:	0800332b 	.word	0x0800332b
 8003158:	0800332b 	.word	0x0800332b
 800315c:	0800332b 	.word	0x0800332b
 8003160:	080031e5 	.word	0x080031e5
 8003164:	0800332b 	.word	0x0800332b
 8003168:	0800332b 	.word	0x0800332b
 800316c:	0800332b 	.word	0x0800332b
 8003170:	08003227 	.word	0x08003227
 8003174:	0800332b 	.word	0x0800332b
 8003178:	0800332b 	.word	0x0800332b
 800317c:	0800332b 	.word	0x0800332b
 8003180:	08003267 	.word	0x08003267
 8003184:	0800332b 	.word	0x0800332b
 8003188:	0800332b 	.word	0x0800332b
 800318c:	0800332b 	.word	0x0800332b
 8003190:	080032a9 	.word	0x080032a9
 8003194:	0800332b 	.word	0x0800332b
 8003198:	0800332b 	.word	0x0800332b
 800319c:	0800332b 	.word	0x0800332b
 80031a0:	080032e9 	.word	0x080032e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fa2e 	bl	800360c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0208 	orr.w	r2, r2, #8
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0204 	bic.w	r2, r2, #4
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	619a      	str	r2, [r3, #24]
      break;
 80031e2:	e0a5      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fa9e 	bl	800372c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	619a      	str	r2, [r3, #24]
      break;
 8003224:	e084      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fb07 	bl	8003840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0208 	orr.w	r2, r2, #8
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
      break;
 8003264:	e064      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fb6f 	bl	8003950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	61da      	str	r2, [r3, #28]
      break;
 80032a6:	e043      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fbb8 	bl	8003a24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032e6:	e023      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fbfc 	bl	8003aec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003302:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003328:	e002      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
      break;
 800332e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop

08003344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIM_ConfigClockSource+0x1c>
 800335c:	2302      	movs	r3, #2
 800335e:	e0b6      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x18a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800338a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339c:	d03e      	beq.n	800341c <HAL_TIM_ConfigClockSource+0xd8>
 800339e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a2:	f200 8087 	bhi.w	80034b4 <HAL_TIM_ConfigClockSource+0x170>
 80033a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033aa:	f000 8086 	beq.w	80034ba <HAL_TIM_ConfigClockSource+0x176>
 80033ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b2:	d87f      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x170>
 80033b4:	2b70      	cmp	r3, #112	; 0x70
 80033b6:	d01a      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0xaa>
 80033b8:	2b70      	cmp	r3, #112	; 0x70
 80033ba:	d87b      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x170>
 80033bc:	2b60      	cmp	r3, #96	; 0x60
 80033be:	d050      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x11e>
 80033c0:	2b60      	cmp	r3, #96	; 0x60
 80033c2:	d877      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x170>
 80033c4:	2b50      	cmp	r3, #80	; 0x50
 80033c6:	d03c      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0xfe>
 80033c8:	2b50      	cmp	r3, #80	; 0x50
 80033ca:	d873      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x170>
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d058      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x13e>
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d86f      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x170>
 80033d4:	2b30      	cmp	r3, #48	; 0x30
 80033d6:	d064      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x15e>
 80033d8:	2b30      	cmp	r3, #48	; 0x30
 80033da:	d86b      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x170>
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d060      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x15e>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d867      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x170>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d05c      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x15e>
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d05a      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x15e>
 80033ec:	e062      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033fe:	f000 fc55 	bl	8003cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	609a      	str	r2, [r3, #8]
      break;
 800341a:	e04f      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800342c:	f000 fc3e 	bl	8003cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800343e:	609a      	str	r2, [r3, #8]
      break;
 8003440:	e03c      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344e:	461a      	mov	r2, r3
 8003450:	f000 fbb2 	bl	8003bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2150      	movs	r1, #80	; 0x50
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fc0b 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 8003460:	e02c      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800346e:	461a      	mov	r2, r3
 8003470:	f000 fbd1 	bl	8003c16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2160      	movs	r1, #96	; 0x60
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fbfb 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 8003480:	e01c      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	461a      	mov	r2, r3
 8003490:	f000 fb92 	bl	8003bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2140      	movs	r1, #64	; 0x40
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fbeb 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 80034a0:	e00c      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f000 fbe2 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 80034b2:	e003      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      break;
 80034b8:	e000      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80034ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a40      	ldr	r2, [pc, #256]	; (80035ec <TIM_Base_SetConfig+0x114>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d00f      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3d      	ldr	r2, [pc, #244]	; (80035f0 <TIM_Base_SetConfig+0x118>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3c      	ldr	r2, [pc, #240]	; (80035f4 <TIM_Base_SetConfig+0x11c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <TIM_Base_SetConfig+0x120>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3a      	ldr	r2, [pc, #232]	; (80035fc <TIM_Base_SetConfig+0x124>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2f      	ldr	r2, [pc, #188]	; (80035ec <TIM_Base_SetConfig+0x114>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01f      	beq.n	8003572 <TIM_Base_SetConfig+0x9a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003538:	d01b      	beq.n	8003572 <TIM_Base_SetConfig+0x9a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <TIM_Base_SetConfig+0x118>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d017      	beq.n	8003572 <TIM_Base_SetConfig+0x9a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <TIM_Base_SetConfig+0x11c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <TIM_Base_SetConfig+0x9a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <TIM_Base_SetConfig+0x120>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00f      	beq.n	8003572 <TIM_Base_SetConfig+0x9a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a29      	ldr	r2, [pc, #164]	; (80035fc <TIM_Base_SetConfig+0x124>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00b      	beq.n	8003572 <TIM_Base_SetConfig+0x9a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a28      	ldr	r2, [pc, #160]	; (8003600 <TIM_Base_SetConfig+0x128>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d007      	beq.n	8003572 <TIM_Base_SetConfig+0x9a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <TIM_Base_SetConfig+0x12c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_Base_SetConfig+0x9a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <TIM_Base_SetConfig+0x130>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d108      	bne.n	8003584 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <TIM_Base_SetConfig+0x114>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00f      	beq.n	80035d0 <TIM_Base_SetConfig+0xf8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <TIM_Base_SetConfig+0x124>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00b      	beq.n	80035d0 <TIM_Base_SetConfig+0xf8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a11      	ldr	r2, [pc, #68]	; (8003600 <TIM_Base_SetConfig+0x128>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d007      	beq.n	80035d0 <TIM_Base_SetConfig+0xf8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <TIM_Base_SetConfig+0x12c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_Base_SetConfig+0xf8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <TIM_Base_SetConfig+0x130>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d103      	bne.n	80035d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	615a      	str	r2, [r3, #20]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800
 80035f8:	40000c00 	.word	0x40000c00
 80035fc:	40013400 	.word	0x40013400
 8003600:	40014000 	.word	0x40014000
 8003604:	40014400 	.word	0x40014400
 8003608:	40014800 	.word	0x40014800

0800360c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 0201 	bic.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f023 0302 	bic.w	r3, r3, #2
 8003658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <TIM_OC1_SetConfig+0x10c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00f      	beq.n	800368c <TIM_OC1_SetConfig+0x80>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a2b      	ldr	r2, [pc, #172]	; (800371c <TIM_OC1_SetConfig+0x110>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00b      	beq.n	800368c <TIM_OC1_SetConfig+0x80>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <TIM_OC1_SetConfig+0x114>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <TIM_OC1_SetConfig+0x80>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a29      	ldr	r2, [pc, #164]	; (8003724 <TIM_OC1_SetConfig+0x118>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_OC1_SetConfig+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a28      	ldr	r2, [pc, #160]	; (8003728 <TIM_OC1_SetConfig+0x11c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10c      	bne.n	80036a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f023 0308 	bic.w	r3, r3, #8
 8003692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f023 0304 	bic.w	r3, r3, #4
 80036a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <TIM_OC1_SetConfig+0x10c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <TIM_OC1_SetConfig+0xc2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1a      	ldr	r2, [pc, #104]	; (800371c <TIM_OC1_SetConfig+0x110>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_OC1_SetConfig+0xc2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a19      	ldr	r2, [pc, #100]	; (8003720 <TIM_OC1_SetConfig+0x114>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_OC1_SetConfig+0xc2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a18      	ldr	r2, [pc, #96]	; (8003724 <TIM_OC1_SetConfig+0x118>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_OC1_SetConfig+0xc2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a17      	ldr	r2, [pc, #92]	; (8003728 <TIM_OC1_SetConfig+0x11c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d111      	bne.n	80036f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40013400 	.word	0x40013400
 8003720:	40014000 	.word	0x40014000
 8003724:	40014400 	.word	0x40014400
 8003728:	40014800 	.word	0x40014800

0800372c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f023 0210 	bic.w	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0320 	bic.w	r3, r3, #32
 800377a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a28      	ldr	r2, [pc, #160]	; (800382c <TIM_OC2_SetConfig+0x100>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_OC2_SetConfig+0x6c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <TIM_OC2_SetConfig+0x104>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10d      	bne.n	80037b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a1d      	ldr	r2, [pc, #116]	; (800382c <TIM_OC2_SetConfig+0x100>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00f      	beq.n	80037dc <TIM_OC2_SetConfig+0xb0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <TIM_OC2_SetConfig+0x104>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_OC2_SetConfig+0xb0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <TIM_OC2_SetConfig+0x108>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_OC2_SetConfig+0xb0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a1a      	ldr	r2, [pc, #104]	; (8003838 <TIM_OC2_SetConfig+0x10c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_OC2_SetConfig+0xb0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a19      	ldr	r2, [pc, #100]	; (800383c <TIM_OC2_SetConfig+0x110>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d113      	bne.n	8003804 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40013400 	.word	0x40013400
 8003834:	40014000 	.word	0x40014000
 8003838:	40014400 	.word	0x40014400
 800383c:	40014800 	.word	0x40014800

08003840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800388c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a27      	ldr	r2, [pc, #156]	; (800393c <TIM_OC3_SetConfig+0xfc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_OC3_SetConfig+0x6a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <TIM_OC3_SetConfig+0x100>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10d      	bne.n	80038c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <TIM_OC3_SetConfig+0xfc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_OC3_SetConfig+0xae>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <TIM_OC3_SetConfig+0x100>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_OC3_SetConfig+0xae>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <TIM_OC3_SetConfig+0x104>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_OC3_SetConfig+0xae>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <TIM_OC3_SetConfig+0x108>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_OC3_SetConfig+0xae>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <TIM_OC3_SetConfig+0x10c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d113      	bne.n	8003916 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40013400 	.word	0x40013400
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800

08003950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <TIM_OC4_SetConfig+0xc0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00f      	beq.n	80039d4 <TIM_OC4_SetConfig+0x84>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <TIM_OC4_SetConfig+0xc4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <TIM_OC4_SetConfig+0x84>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <TIM_OC4_SetConfig+0xc8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_OC4_SetConfig+0x84>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <TIM_OC4_SetConfig+0xcc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC4_SetConfig+0x84>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <TIM_OC4_SetConfig+0xd0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d109      	bne.n	80039e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40013400 	.word	0x40013400
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <TIM_OC5_SetConfig+0xb4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00f      	beq.n	8003a9e <TIM_OC5_SetConfig+0x7a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a16      	ldr	r2, [pc, #88]	; (8003adc <TIM_OC5_SetConfig+0xb8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_OC5_SetConfig+0x7a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <TIM_OC5_SetConfig+0xbc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <TIM_OC5_SetConfig+0x7a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <TIM_OC5_SetConfig+0xc0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_OC5_SetConfig+0x7a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <TIM_OC5_SetConfig+0xc4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d109      	bne.n	8003ab2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40013400 	.word	0x40013400
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400
 8003ae8:	40014800 	.word	0x40014800

08003aec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	051b      	lsls	r3, r3, #20
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <TIM_OC6_SetConfig+0xb8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00f      	beq.n	8003b68 <TIM_OC6_SetConfig+0x7c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <TIM_OC6_SetConfig+0xbc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_OC6_SetConfig+0x7c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a16      	ldr	r2, [pc, #88]	; (8003bac <TIM_OC6_SetConfig+0xc0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_OC6_SetConfig+0x7c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <TIM_OC6_SetConfig+0xc4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_OC6_SetConfig+0x7c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <TIM_OC6_SetConfig+0xc8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d109      	bne.n	8003b7c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	029b      	lsls	r3, r3, #10
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40013400 	.word	0x40013400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800

08003bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f023 0201 	bic.w	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 030a 	bic.w	r3, r3, #10
 8003bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b087      	sub	sp, #28
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 0210 	bic.w	r2, r3, #16
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	031b      	lsls	r3, r3, #12
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f043 0307 	orr.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	609a      	str	r2, [r3, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	021a      	lsls	r2, r3, #8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2201      	movs	r2, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e068      	b.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2e      	ldr	r2, [pc, #184]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d108      	bne.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc2:	d018      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10c      	bne.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40013400 	.word	0x40013400
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40014000 	.word	0x40014000

08003e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e040      	b.n	8003edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fc fda0 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fdea 	bl	8004a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fb2f 	bl	80044f8 <UART_SetConfig>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e01b      	b.n	8003edc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fe69 	bl	8004bac <UART_CheckIdleState>
 8003eda:	4603      	mov	r3, r0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b0ba      	sub	sp, #232	; 0xe8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f12:	4013      	ands	r3, r2
 8003f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d115      	bne.n	8003f4c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00f      	beq.n	8003f4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 82ae 	beq.w	800449e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
      }
      return;
 8003f4a:	e2a8      	b.n	800449e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8117 	beq.w	8004184 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f66:	4b85      	ldr	r3, [pc, #532]	; (800417c <HAL_UART_IRQHandler+0x298>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 810a 	beq.w	8004184 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d011      	beq.n	8003fa0 <HAL_UART_IRQHandler+0xbc>
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d011      	beq.n	8003fd0 <HAL_UART_IRQHandler+0xec>
 8003fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00b      	beq.n	8003fd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d011      	beq.n	8004000 <HAL_UART_IRQHandler+0x11c>
 8003fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2204      	movs	r2, #4
 8003fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d017      	beq.n	800403c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2208      	movs	r2, #8
 800402a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004032:	f043 0208 	orr.w	r2, r3, #8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004044:	2b00      	cmp	r3, #0
 8004046:	d012      	beq.n	800406e <HAL_UART_IRQHandler+0x18a>
 8004048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00c      	beq.n	800406e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800405c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8214 	beq.w	80044a2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d005      	beq.n	80040c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d04f      	beq.n	8004166 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fe7f 	bl	8004dca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d141      	bne.n	800415e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004106:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800410a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800411e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1d9      	bne.n	80040da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	2b00      	cmp	r3, #0
 800412c:	d013      	beq.n	8004156 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004132:	4a13      	ldr	r2, [pc, #76]	; (8004180 <HAL_UART_IRQHandler+0x29c>)
 8004134:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc ffec 	bl	8001118 <HAL_DMA_Abort_IT>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d017      	beq.n	8004176 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004150:	4610      	mov	r0, r2
 8004152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e00f      	b.n	8004176 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9b8 	bl	80044cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	e00b      	b.n	8004176 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9b4 	bl	80044cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	e007      	b.n	8004176 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f9b0 	bl	80044cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004174:	e195      	b.n	80044a2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004176:	bf00      	nop
    return;
 8004178:	e193      	b.n	80044a2 <HAL_UART_IRQHandler+0x5be>
 800417a:	bf00      	nop
 800417c:	04000120 	.word	0x04000120
 8004180:	08004e93 	.word	0x08004e93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 814e 	bne.w	800442a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8147 	beq.w	800442a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8140 	beq.w	800442a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2210      	movs	r2, #16
 80041b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	f040 80b8 	bne.w	8004332 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8167 	beq.w	80044a6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041e2:	429a      	cmp	r2, r3
 80041e4:	f080 815f 	bcs.w	80044a6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 8086 	bne.w	8004310 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800421c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800422e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004232:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800423a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1da      	bne.n	8004204 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800425e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3308      	adds	r3, #8
 800426e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004272:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004276:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800427a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e1      	bne.n	800424e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800429a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e3      	bne.n	800428a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	f023 0310 	bic.w	r3, r3, #16
 80042e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80042f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e4      	bne.n	80042d0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc fec6 	bl	800109c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004322:	b29b      	uxth	r3, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	b29b      	uxth	r3, r3
 8004328:	4619      	mov	r1, r3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f8d8 	bl	80044e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004330:	e0b9      	b.n	80044a6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800433e:	b29b      	uxth	r3, r3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80ab 	beq.w	80044aa <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a6 	beq.w	80044aa <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800438e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e4      	bne.n	800435e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3308      	adds	r3, #8
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	623b      	str	r3, [r7, #32]
   return(result);
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3308      	adds	r3, #8
 80043b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043b8:	633a      	str	r2, [r7, #48]	; 0x30
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e3      	bne.n	8004394 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f023 0310 	bic.w	r3, r3, #16
 80043f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	69b9      	ldr	r1, [r7, #24]
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	617b      	str	r3, [r7, #20]
   return(result);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e4      	bne.n	80043e0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800441c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004420:	4619      	mov	r1, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f85c 	bl	80044e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004428:	e03f      	b.n	80044aa <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00e      	beq.n	8004454 <HAL_UART_IRQHandler+0x570>
 8004436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800444a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fd60 	bl	8004f12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004452:	e02d      	b.n	80044b0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01c      	beq.n	80044ae <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
    }
    return;
 800447c:	e017      	b.n	80044ae <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <HAL_UART_IRQHandler+0x5cc>
 800448a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fd11 	bl	8004ebe <UART_EndTransmit_IT>
    return;
 800449c:	e008      	b.n	80044b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800449e:	bf00      	nop
 80044a0:	e006      	b.n	80044b0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80044a2:	bf00      	nop
 80044a4:	e004      	b.n	80044b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80044ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80044b0:	37e8      	adds	r7, #232	; 0xe8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop

080044b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b08a      	sub	sp, #40	; 0x28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4313      	orrs	r3, r2
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4ba4      	ldr	r3, [pc, #656]	; (80047b8 <UART_SetConfig+0x2c0>)
 8004528:	4013      	ands	r3, r2
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004530:	430b      	orrs	r3, r1
 8004532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a99      	ldr	r2, [pc, #612]	; (80047bc <UART_SetConfig+0x2c4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	4313      	orrs	r3, r2
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	430a      	orrs	r2, r1
 8004576:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a90      	ldr	r2, [pc, #576]	; (80047c0 <UART_SetConfig+0x2c8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d126      	bne.n	80045d0 <UART_SetConfig+0xd8>
 8004582:	4b90      	ldr	r3, [pc, #576]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b03      	cmp	r3, #3
 800458e:	d81b      	bhi.n	80045c8 <UART_SetConfig+0xd0>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0xa0>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045c1 	.word	0x080045c1
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e116      	b.n	80047de <UART_SetConfig+0x2e6>
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e112      	b.n	80047de <UART_SetConfig+0x2e6>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e10e      	b.n	80047de <UART_SetConfig+0x2e6>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e10a      	b.n	80047de <UART_SetConfig+0x2e6>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e106      	b.n	80047de <UART_SetConfig+0x2e6>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <UART_SetConfig+0x2d0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d138      	bne.n	800464c <UART_SetConfig+0x154>
 80045da:	4b7a      	ldr	r3, [pc, #488]	; (80047c4 <UART_SetConfig+0x2cc>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d82d      	bhi.n	8004644 <UART_SetConfig+0x14c>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0xf8>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004625 	.word	0x08004625
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004645 	.word	0x08004645
 80045fc:	08004645 	.word	0x08004645
 8004600:	08004635 	.word	0x08004635
 8004604:	08004645 	.word	0x08004645
 8004608:	08004645 	.word	0x08004645
 800460c:	08004645 	.word	0x08004645
 8004610:	0800462d 	.word	0x0800462d
 8004614:	08004645 	.word	0x08004645
 8004618:	08004645 	.word	0x08004645
 800461c:	08004645 	.word	0x08004645
 8004620:	0800463d 	.word	0x0800463d
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462a:	e0d8      	b.n	80047de <UART_SetConfig+0x2e6>
 800462c:	2302      	movs	r3, #2
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004632:	e0d4      	b.n	80047de <UART_SetConfig+0x2e6>
 8004634:	2304      	movs	r3, #4
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e0d0      	b.n	80047de <UART_SetConfig+0x2e6>
 800463c:	2308      	movs	r3, #8
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e0cc      	b.n	80047de <UART_SetConfig+0x2e6>
 8004644:	2310      	movs	r3, #16
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e0c8      	b.n	80047de <UART_SetConfig+0x2e6>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5e      	ldr	r2, [pc, #376]	; (80047cc <UART_SetConfig+0x2d4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d125      	bne.n	80046a2 <UART_SetConfig+0x1aa>
 8004656:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004660:	2b30      	cmp	r3, #48	; 0x30
 8004662:	d016      	beq.n	8004692 <UART_SetConfig+0x19a>
 8004664:	2b30      	cmp	r3, #48	; 0x30
 8004666:	d818      	bhi.n	800469a <UART_SetConfig+0x1a2>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d00a      	beq.n	8004682 <UART_SetConfig+0x18a>
 800466c:	2b20      	cmp	r3, #32
 800466e:	d814      	bhi.n	800469a <UART_SetConfig+0x1a2>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <UART_SetConfig+0x182>
 8004674:	2b10      	cmp	r3, #16
 8004676:	d008      	beq.n	800468a <UART_SetConfig+0x192>
 8004678:	e00f      	b.n	800469a <UART_SetConfig+0x1a2>
 800467a:	2300      	movs	r3, #0
 800467c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004680:	e0ad      	b.n	80047de <UART_SetConfig+0x2e6>
 8004682:	2302      	movs	r3, #2
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004688:	e0a9      	b.n	80047de <UART_SetConfig+0x2e6>
 800468a:	2304      	movs	r3, #4
 800468c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004690:	e0a5      	b.n	80047de <UART_SetConfig+0x2e6>
 8004692:	2308      	movs	r3, #8
 8004694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004698:	e0a1      	b.n	80047de <UART_SetConfig+0x2e6>
 800469a:	2310      	movs	r3, #16
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a0:	e09d      	b.n	80047de <UART_SetConfig+0x2e6>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <UART_SetConfig+0x2d8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d125      	bne.n	80046f8 <UART_SetConfig+0x200>
 80046ac:	4b45      	ldr	r3, [pc, #276]	; (80047c4 <UART_SetConfig+0x2cc>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046b6:	2bc0      	cmp	r3, #192	; 0xc0
 80046b8:	d016      	beq.n	80046e8 <UART_SetConfig+0x1f0>
 80046ba:	2bc0      	cmp	r3, #192	; 0xc0
 80046bc:	d818      	bhi.n	80046f0 <UART_SetConfig+0x1f8>
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d00a      	beq.n	80046d8 <UART_SetConfig+0x1e0>
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d814      	bhi.n	80046f0 <UART_SetConfig+0x1f8>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <UART_SetConfig+0x1d8>
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d008      	beq.n	80046e0 <UART_SetConfig+0x1e8>
 80046ce:	e00f      	b.n	80046f0 <UART_SetConfig+0x1f8>
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e082      	b.n	80047de <UART_SetConfig+0x2e6>
 80046d8:	2302      	movs	r3, #2
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e07e      	b.n	80047de <UART_SetConfig+0x2e6>
 80046e0:	2304      	movs	r3, #4
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e07a      	b.n	80047de <UART_SetConfig+0x2e6>
 80046e8:	2308      	movs	r3, #8
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e076      	b.n	80047de <UART_SetConfig+0x2e6>
 80046f0:	2310      	movs	r3, #16
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e072      	b.n	80047de <UART_SetConfig+0x2e6>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	; (80047d4 <UART_SetConfig+0x2dc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d12a      	bne.n	8004758 <UART_SetConfig+0x260>
 8004702:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004710:	d01a      	beq.n	8004748 <UART_SetConfig+0x250>
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d81b      	bhi.n	8004750 <UART_SetConfig+0x258>
 8004718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471c:	d00c      	beq.n	8004738 <UART_SetConfig+0x240>
 800471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004722:	d815      	bhi.n	8004750 <UART_SetConfig+0x258>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <UART_SetConfig+0x238>
 8004728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472c:	d008      	beq.n	8004740 <UART_SetConfig+0x248>
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x258>
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e052      	b.n	80047de <UART_SetConfig+0x2e6>
 8004738:	2302      	movs	r3, #2
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e04e      	b.n	80047de <UART_SetConfig+0x2e6>
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e04a      	b.n	80047de <UART_SetConfig+0x2e6>
 8004748:	2308      	movs	r3, #8
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e046      	b.n	80047de <UART_SetConfig+0x2e6>
 8004750:	2310      	movs	r3, #16
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e042      	b.n	80047de <UART_SetConfig+0x2e6>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <UART_SetConfig+0x2c4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d13a      	bne.n	80047d8 <UART_SetConfig+0x2e0>
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800476c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004770:	d01a      	beq.n	80047a8 <UART_SetConfig+0x2b0>
 8004772:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004776:	d81b      	bhi.n	80047b0 <UART_SetConfig+0x2b8>
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	d00c      	beq.n	8004798 <UART_SetConfig+0x2a0>
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004782:	d815      	bhi.n	80047b0 <UART_SetConfig+0x2b8>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <UART_SetConfig+0x298>
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d008      	beq.n	80047a0 <UART_SetConfig+0x2a8>
 800478e:	e00f      	b.n	80047b0 <UART_SetConfig+0x2b8>
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e022      	b.n	80047de <UART_SetConfig+0x2e6>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e01e      	b.n	80047de <UART_SetConfig+0x2e6>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e01a      	b.n	80047de <UART_SetConfig+0x2e6>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e016      	b.n	80047de <UART_SetConfig+0x2e6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e012      	b.n	80047de <UART_SetConfig+0x2e6>
 80047b8:	efff69f3 	.word	0xefff69f3
 80047bc:	40008000 	.word	0x40008000
 80047c0:	40013800 	.word	0x40013800
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40004400 	.word	0x40004400
 80047cc:	40004800 	.word	0x40004800
 80047d0:	40004c00 	.word	0x40004c00
 80047d4:	40005000 	.word	0x40005000
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a9f      	ldr	r2, [pc, #636]	; (8004a60 <UART_SetConfig+0x568>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d17a      	bne.n	80048de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d824      	bhi.n	800483a <UART_SetConfig+0x342>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x300>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	0800483b 	.word	0x0800483b
 8004800:	08004825 	.word	0x08004825
 8004804:	0800483b 	.word	0x0800483b
 8004808:	0800482b 	.word	0x0800482b
 800480c:	0800483b 	.word	0x0800483b
 8004810:	0800483b 	.word	0x0800483b
 8004814:	0800483b 	.word	0x0800483b
 8004818:	08004833 	.word	0x08004833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7fd fd06 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8004820:	61f8      	str	r0, [r7, #28]
        break;
 8004822:	e010      	b.n	8004846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004824:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <UART_SetConfig+0x56c>)
 8004826:	61fb      	str	r3, [r7, #28]
        break;
 8004828:	e00d      	b.n	8004846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482a:	f7fd fc67 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 800482e:	61f8      	str	r0, [r7, #28]
        break;
 8004830:	e009      	b.n	8004846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004836:	61fb      	str	r3, [r7, #28]
        break;
 8004838:	e005      	b.n	8004846 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004844:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80fb 	beq.w	8004a44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	429a      	cmp	r2, r3
 800485c:	d305      	bcc.n	800486a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	429a      	cmp	r2, r3
 8004868:	d903      	bls.n	8004872 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004870:	e0e8      	b.n	8004a44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2200      	movs	r2, #0
 8004876:	461c      	mov	r4, r3
 8004878:	4615      	mov	r5, r2
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	022b      	lsls	r3, r5, #8
 8004884:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004888:	0222      	lsls	r2, r4, #8
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	6849      	ldr	r1, [r1, #4]
 800488e:	0849      	lsrs	r1, r1, #1
 8004890:	2000      	movs	r0, #0
 8004892:	4688      	mov	r8, r1
 8004894:	4681      	mov	r9, r0
 8004896:	eb12 0a08 	adds.w	sl, r2, r8
 800489a:	eb43 0b09 	adc.w	fp, r3, r9
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ac:	4650      	mov	r0, sl
 80048ae:	4659      	mov	r1, fp
 80048b0:	f7fb fc8a 	bl	80001c8 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4613      	mov	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c2:	d308      	bcc.n	80048d6 <UART_SetConfig+0x3de>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ca:	d204      	bcs.n	80048d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	e0b6      	b.n	8004a44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048dc:	e0b2      	b.n	8004a44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e6:	d15e      	bne.n	80049a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d828      	bhi.n	8004942 <UART_SetConfig+0x44a>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <UART_SetConfig+0x400>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	08004925 	.word	0x08004925
 8004900:	0800492d 	.word	0x0800492d
 8004904:	08004943 	.word	0x08004943
 8004908:	08004933 	.word	0x08004933
 800490c:	08004943 	.word	0x08004943
 8004910:	08004943 	.word	0x08004943
 8004914:	08004943 	.word	0x08004943
 8004918:	0800493b 	.word	0x0800493b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800491c:	f7fd fc86 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8004920:	61f8      	str	r0, [r7, #28]
        break;
 8004922:	e014      	b.n	800494e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004924:	f7fd fc98 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8004928:	61f8      	str	r0, [r7, #28]
        break;
 800492a:	e010      	b.n	800494e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800492c:	4b4d      	ldr	r3, [pc, #308]	; (8004a64 <UART_SetConfig+0x56c>)
 800492e:	61fb      	str	r3, [r7, #28]
        break;
 8004930:	e00d      	b.n	800494e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fd fbe3 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8004936:	61f8      	str	r0, [r7, #28]
        break;
 8004938:	e009      	b.n	800494e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493e:	61fb      	str	r3, [r7, #28]
        break;
 8004940:	e005      	b.n	800494e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800494c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d077      	beq.n	8004a44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005a      	lsls	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0f      	cmp	r3, #15
 800496e:	d916      	bls.n	800499e <UART_SetConfig+0x4a6>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004976:	d212      	bcs.n	800499e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f023 030f 	bic.w	r3, r3, #15
 8004980:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	b29a      	uxth	r2, r3
 800498e:	8afb      	ldrh	r3, [r7, #22]
 8004990:	4313      	orrs	r3, r2
 8004992:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	8afa      	ldrh	r2, [r7, #22]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	e052      	b.n	8004a44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049a4:	e04e      	b.n	8004a44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d827      	bhi.n	80049fe <UART_SetConfig+0x506>
 80049ae:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <UART_SetConfig+0x4bc>)
 80049b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049e1 	.word	0x080049e1
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	080049ff 	.word	0x080049ff
 80049c4:	080049ef 	.word	0x080049ef
 80049c8:	080049ff 	.word	0x080049ff
 80049cc:	080049ff 	.word	0x080049ff
 80049d0:	080049ff 	.word	0x080049ff
 80049d4:	080049f7 	.word	0x080049f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d8:	f7fd fc28 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 80049dc:	61f8      	str	r0, [r7, #28]
        break;
 80049de:	e014      	b.n	8004a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7fd fc3a 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 80049e4:	61f8      	str	r0, [r7, #28]
        break;
 80049e6:	e010      	b.n	8004a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <UART_SetConfig+0x56c>)
 80049ea:	61fb      	str	r3, [r7, #28]
        break;
 80049ec:	e00d      	b.n	8004a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ee:	f7fd fb85 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80049f2:	61f8      	str	r0, [r7, #28]
        break;
 80049f4:	e009      	b.n	8004a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fa:	61fb      	str	r3, [r7, #28]
        break;
 80049fc:	e005      	b.n	8004a0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a08:	bf00      	nop
    }

    if (pclk != 0U)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d019      	beq.n	8004a44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	085a      	lsrs	r2, r3, #1
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	441a      	add	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	d909      	bls.n	8004a3e <UART_SetConfig+0x546>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a30:	d205      	bcs.n	8004a3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	e002      	b.n	8004a44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3728      	adds	r7, #40	; 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5e:	bf00      	nop
 8004a60:	40008000 	.word	0x40008000
 8004a64:	00f42400 	.word	0x00f42400

08004a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01a      	beq.n	8004b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b66:	d10a      	bne.n	8004b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b098      	sub	sp, #96	; 0x60
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bbc:	f7fc f874 	bl	8000ca8 <HAL_GetTick>
 8004bc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d12e      	bne.n	8004c2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f88c 	bl	8004cfc <UART_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d021      	beq.n	8004c2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c08:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e6      	bne.n	8004bea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e062      	b.n	8004cf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d149      	bne.n	8004cd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c44:	2200      	movs	r2, #0
 8004c46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f856 	bl	8004cfc <UART_WaitOnFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d03c      	beq.n	8004cd0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	623b      	str	r3, [r7, #32]
   return(result);
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c74:	633b      	str	r3, [r7, #48]	; 0x30
 8004c76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e6      	bne.n	8004c56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ca8:	61fa      	str	r2, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e011      	b.n	8004cf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3758      	adds	r7, #88	; 0x58
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0c:	e049      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d045      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d16:	f7fb ffc7 	bl	8000ca8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d302      	bcc.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e048      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d031      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d110      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2208      	movs	r2, #8
 8004d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f838 	bl	8004dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e029      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7c:	d111      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f81e 	bl	8004dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e00f      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d0a6      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b095      	sub	sp, #84	; 0x54
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df0:	643b      	str	r3, [r7, #64]	; 0x40
 8004df2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004df6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3308      	adds	r3, #8
 8004e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d118      	bne.n	8004e72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f023 0310 	bic.w	r3, r3, #16
 8004e54:	647b      	str	r3, [r7, #68]	; 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e6      	bne.n	8004e40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e86:	bf00      	nop
 8004e88:	3754      	adds	r7, #84	; 0x54
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff fb0b 	bl	80044cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b088      	sub	sp, #32
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6979      	ldr	r1, [r7, #20]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e6      	bne.n	8004ec6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff fad7 	bl	80044b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f0a:	bf00      	nop
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <memset>:
 8004f26:	4402      	add	r2, r0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d100      	bne.n	8004f30 <memset+0xa>
 8004f2e:	4770      	bx	lr
 8004f30:	f803 1b01 	strb.w	r1, [r3], #1
 8004f34:	e7f9      	b.n	8004f2a <memset+0x4>
	...

08004f38 <__libc_init_array>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4d0d      	ldr	r5, [pc, #52]	; (8004f70 <__libc_init_array+0x38>)
 8004f3c:	4c0d      	ldr	r4, [pc, #52]	; (8004f74 <__libc_init_array+0x3c>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	2600      	movs	r6, #0
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	d109      	bne.n	8004f5c <__libc_init_array+0x24>
 8004f48:	4d0b      	ldr	r5, [pc, #44]	; (8004f78 <__libc_init_array+0x40>)
 8004f4a:	4c0c      	ldr	r4, [pc, #48]	; (8004f7c <__libc_init_array+0x44>)
 8004f4c:	f000 f818 	bl	8004f80 <_init>
 8004f50:	1b64      	subs	r4, r4, r5
 8004f52:	10a4      	asrs	r4, r4, #2
 8004f54:	2600      	movs	r6, #0
 8004f56:	42a6      	cmp	r6, r4
 8004f58:	d105      	bne.n	8004f66 <__libc_init_array+0x2e>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f60:	4798      	blx	r3
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7ee      	b.n	8004f44 <__libc_init_array+0xc>
 8004f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6a:	4798      	blx	r3
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	e7f2      	b.n	8004f56 <__libc_init_array+0x1e>
 8004f70:	08004fe8 	.word	0x08004fe8
 8004f74:	08004fe8 	.word	0x08004fe8
 8004f78:	08004fe8 	.word	0x08004fe8
 8004f7c:	08004fec 	.word	0x08004fec

08004f80 <_init>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

08004f8c <_fini>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr
